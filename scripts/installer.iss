; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "TrackHat driver"
#define MyAppVersion "0.1"
#define MyAppPublisher "WizzDev"
#define MyAppURL "https://www.trackhat.org/"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D142B095-224D-461F-8A04-B4F06D51FDFD}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=..\LICENSE.txt
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir=..\build\installer
OutputBaseFilename=TrackHat-driver-installer-{#MyAppVersion}
SetupIconFile=..\others\trackhat.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
; Install as x64
ArchitecturesInstallIn64BitMode=x64
; Tell Windows Explorer to reload the environment
ChangesEnvironment=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "..\build\src\Release\track-hat.dll"; DestDir: "{app}"; Flags: ignoreversion;
Source: "..\src\track_hat_driver.h"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\src\track_hat_types.h"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[Registry]
Root: "HKLM"; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}"; \
Check: IsAdmin and NotExistsInPathHKLM(ExpandConstant('{app}'))

Root: "HKCU"; Subkey: "Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}"; \
Check: not IsAdmin and NotExistsInPathHKCU(ExpandConstant('{app}'))


[Code]
const
  EnvironmentKeyHKLM = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';
  EnvironmentKeyHKCU = 'Environment';
  VariableName       = 'Path';


// Check if 'Param' exists in LOCAL_MACHINE Path
function NotExistsInPathHKLM(Param: string): boolean;
var
  OrigPath: string;
begin
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE, EnvironmentKeyHKLM,
                             VariableName, OrigPath)
then begin
  Result := True;
  exit;
end;
  // look for the path with leading and trailing semicolon
  // Pos() returns 0 if not found
  Result := Pos(';' + Param + ';', ';' + OrigPath + ';') = 0;
end;


// Check if 'Param' exists in HKEY_CURRENT_USER Path
function NotExistsInPathHKCU(Param: string): boolean;
var
  OrigPath: string;
begin
  if not RegQueryStringValue(HKEY_CURRENT_USER, EnvironmentKeyHKCU,
                             VariableName, OrigPath)
then begin
  Result := True;
  exit;
end;
  // look for the path with leading and trailing semicolon
  // Pos() returns 0 if not found
  Result := Pos(';' + Param + ';', ';' + OrigPath + ';') = 0;
end;


// Remove variable from Path
procedure RemovePath(const RootKey: Integer; const SubKeyName, Path: string);
var
  Paths: string;
  P: Integer;
begin
  if not RegQueryStringValue(RootKey, SubKeyName, VariableName, Paths) then
    begin
      Log('PATH not found');
    end
  else
    begin
      Log(Format('PATH is [%s]', [Paths]));

      P := Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';');
      if P = 0 then
        begin
          Log(Format('Path [%s] not found in PATH', [Path]));
        end
      else
        begin
          if P > 1 then P := P - 1;
          Delete(Paths, P, Length(Path) + 1);
          Log(Format('Path [%s] removed from PATH => [%s]', [Path, Paths]));

          if RegWriteStringValue(RootKey, SubKeyName, VariableName, Paths) then
            begin
              Log('PATH written');
            end
          else
            begin
              Log('Error writing PATH');
            end;
        end;
    end;
end;

// Uninstall event
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usUninstall then
  begin
      if IsAdmin then
        begin
          // MsgBox('Admin installation.', mbInformation, MB_OK)
          RemovePath(HKEY_LOCAL_MACHINE, EnvironmentKeyHKLM, ExpandConstant('{app}'));
        end
      else
        begin
          // MsgBox('User installation.', mbInformation, MB_OK);
          RemovePath(HKEY_CURRENT_USER, EnvironmentKeyHKCU, ExpandConstant('{app}'));
        end;
  end;
end;
